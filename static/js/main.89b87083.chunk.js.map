{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSort","isReversed","setReverse","visibleGood","goods","visibleGoods","ALPHABET","sort","currentGood","nextGood","localeCompare","LENGTH","length","reverse","getReorderedGoods","shouldRenderResetButton","className","type","classNames","onClick","prev","map","name","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA0CE,IAAME,EAAgB,WAC3B,MAA4BC,mBAASH,EAASI,MAA9C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAiCH,oBAAS,GAA1C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAlCD,SACLC,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAENI,EAAY,YAAOD,GAEzB,OAAQL,GACN,KAAKL,EAASY,SACZD,EAAaE,MAAK,SAACC,EAAaC,GAAd,OAChBD,EAAYE,cAAcD,MAE5B,MAEF,KAAKf,EAASiB,OACZN,EAAaE,MAAK,SAACC,EAAaC,GAAd,OAChBD,EAAYI,OAASH,EAASG,UAIlC,KAAKlB,EAASI,MAShB,OAJIG,GACFI,EAAaQ,UAGRR,EAMaS,CAClBnB,EACA,CAAEI,WAAUE,eAERc,EAA0BhB,IAAaL,EAASI,MAAQG,EAM9D,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYnB,IAAaL,EAASY,WAEtCa,QAAS,WACPnB,EAAQN,EAASY,WARrB,iCAcA,wBACEW,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYnB,IAAaL,EAASiB,SAEtCQ,QAAS,WACPnB,EAAQN,EAASiB,SARrB,4BAcA,wBACEM,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAajB,IAEjBkB,QAAS,kBAAMjB,GAAW,SAAAkB,GAAI,OAAKA,MAPrC,qBAYCL,GACC,wBACEE,KAAK,SACLD,UAAU,mBACVG,QApDU,WAClBnB,EAAQN,EAASI,MACjBI,GAAW,IA+CL,sBAUJ,6BACGC,EAAYkB,KAAI,SAAAC,GAAI,OACnB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YC9HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.89b87083.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((currentGood, nextGood) => (\n        currentGood.localeCompare(nextGood)\n      ));\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((currentGood, nextGood) => (\n        currentGood.length - nextGood.length\n      ));\n      break;\n\n    case SortType.NONE:\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSort] = useState(SortType.NONE);\n  const [isReversed, setReverse] = useState(false);\n  const visibleGood = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n  );\n  const shouldRenderResetButton = sortType !== SortType.NONE || isReversed;\n  const resetButton = () => {\n    setSort(SortType.NONE);\n    setReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => {\n            setSort(SortType.ALPHABET);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => {\n            setSort(SortType.LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setReverse(prev => !prev)}\n        >\n          Reverse\n        </button>\n\n        {shouldRenderResetButton && (\n          <button\n            type=\"button\"\n            className=\"button is-danger\"\n            onClick={resetButton}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGood.map(name => (\n          <li key={name} data-cy=\"Good\">{name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}